@charset "UTF-8";

// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------

// Center-align a block level element
@mixin center-block {
    margin-left: auto;
    margin-right: auto;
}

%center-block{
    @include center-block;
}

// clearfix
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

%clearfix {
    @include clearfix;
}

// ellipsis
@mixin ellipsis {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

%ellipsis {
    @include ellipsis;
}

// ellipsis multi
@mixin ellipsis-lines($lines: 2) {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
}

%ellipsis-lines{
    @include ellipsis-lines;
}

// word-break
// 用于链接地址强制换行

@mixin word-break {
    white-space: normal;
    word-wrap: break-word;
    word-break: break-all;
}

%word-break {
    @include word-break;
}

// disabled
// 禁用样式，加!important
@mixin disabled($textColor: nth($colorDisabled, 1), $bgColor: nth($colorDisabled, 2), $borderColor: false) {
    background-color: $bgColor !important;
    color: $textColor !important;
    cursor: default !important;
    pointer-events: none !important;

    @if $borderColor {
        border: 1px solid nth($colorDisabled, 3);
    }
}

%disabled {
    @include disabled;
}

// fixed top & bottom
@mixin fixed($pos: 0) {
    position: fixed;
    left: 0;
    right: 0;

    @if $pos == bottom {
        bottom: 0;
    }
    @else {
        top: $pos;
    }
}

%fixed-top {
    @include fixed;
}

%fixed-bottom {
    @include fixed($pos: bottom);
}

// justify
@mixin justify {
    display: flex;
    justify-content: space-between;
}

%justify{
    @include justify;
}

// flex 等分
@mixin equal-flex($children: li) {
    display: flex;

    $childrenEle: li div p a span strong;

    @if index($childrenEle, $children) {
        #{$children} {
            flex: 1;
        }
    }
    @else {
        .#{$children} {
            flex: 1;
        }
    }
}

// flex center
@mixin center-flex($direction: both) {
    display: flex;

    @if $direction == both {
        justify-content: center;
        align-items: center;
    }
    @else if $direction == x {
        justify-content: center;
    }
    @else if $direction == y {
        align-items: center;
    }
}

%center-flex {
    @include center-flex;
}

// translate center
@mixin center-translate($direction: both) {
    position: absolute;

    @if $direction == both {
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
    }
    @else if $direction == x {
        left: 50%;
        transform: translate3d(-50%, 0, 0);
    }
    @else if $direction == y {
        top: 50%;
        transform: translate3d(0, -50%, 0);
    }
}

%center-translate {
    @include center-translate;
}

// triangle 三角箭头
%triangle-basic {
    content: "";
    height: 0;
    width: 0;
    overflow: hidden;
}

@mixin triangle($direction: bottom, $borderWidth: 6px, $borderColor: $gray6) {
    @extend %triangle-basic;

    @if $direction == top {
        border-bottom: $borderWidth solid $borderColor;
        border-left: $borderWidth dashed transparent;
        border-right: $borderWidth dashed transparent;
    }
    @else if $direction == right {
        border-left: $borderWidth solid $borderColor;
        border-top: $borderWidth dashed transparent;
        border-bottom: $borderWidth dashed transparent;
    }
    @else if $direction == bottom {
        border-top: $borderWidth solid $borderColor;
        border-left: $borderWidth dashed transparent;
        border-right: $borderWidth dashed transparent;
    }
    @else if $direction == left {
        border-right: $borderWidth solid $borderColor;
        border-top: $borderWidth dashed transparent;
        border-bottom: $borderWidth dashed transparent;
    }
}

%triangle-bottom{
    @include triangle;
}

%triangle-top{
    @include triangle($direction: top);
}


//其他占位符
%transition-all {
    transition: all .3s ease-in-out;
}

%translate3d {
    transform: translate3d(0, 0, 0);
}

%page-out {
    transition: transform 0.4s cubic-bezier(0.42, 0, 0.58, 1) 0.1s;
}

%page-in {
    transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1);
}


// btn
//----------------------------------------------------
// btn-basic
// 按钮基本样式，联合申明
%btn-basic {
    display: inline-block;
    vertical-align: middle;
    cursor: pointer;
    text-align: center;
    border: 0 none;
    box-sizing: border-box;
    user-select: none;
}

// btn-size
// 按钮大小
@mixin btn-size($padding: nth($btnSize, 1), $height: nth($btnSize, 2), $radius: $btnRadius, $border: true) {
    padding: 0 $padding;
    height: $height;
    font-size: $fontSize;
    
    @if $radius {
        border-radius: $btnRadius;
    }
    @if $border {
        line-height: $height - 2;
    }
    @else {
        line-height: $height;
    }
}

// btn-color
// 包括按钮背景色，文本色，是否有边框
@mixin btn-color($textColor: nth($btnColor, 1), $bgColor: nth($btnColor, 2), $borderColor: $green) {
    color: $textColor;
    background-color: $bgColor;
    @if $borderColor {
        @if length($borderColor) == 1 { // $borderColor: #dbdbdb
            border: 1px solid $borderColor;
        }
        @else if length($borderColor) == 2 { // $borderColor: #dbdbdb #ccc => #dbdbdb
            border: 1px solid nth($borderColor, 1);
        }
        @else {
            border: $borderColor; // $borderColor: 1px solid #dbdbdb
        }
    }
    &:hover {
        color: $textColor;
        @if lightness($bgColor) > 40% {
            background-color: darken($bgColor, 5%);
        }
        @else {
            background-color: lighten($bgColor, 5%);
        }
        @if length($borderColor) == 2 {
            border-color: nth($borderColor, 2); // $borderColor: #dbdbdb #ccc => #ccc
        }
    }
}





//group column
@mixin group-grid($grid: 2, $margin: $basePadding) {
    & {
        ul {
            margin-left: -$margin / 2;
            margin-right: -$margin / 2;

            @extend %clearfix;

            li {
                float: left;
                width: 100 / $grid * 1%;
                margin-bottom: $margin;
                padding-left: $margin / 2;
                padding-right: $margin / 2;

                a {
                    display: block;
                }
            }
        }
    }
}

%group-grid{
    @include group-grid;
}
%group-grid-3{
    @include group-grid($grid: 3);
}

//Image
@mixin image-responsive($width: 140px, $height: 200px) {
    & {
        position: relative;
        padding-top: $height / $width * 100%;
        img {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
        }
    }
}

%image-responsive {
    @include image-responsive;
}
